What is a Stack?
A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle. 
This means that the last element added to the stack will be the first one to be removed. 
You can think of it like a stack of plates; you add and remove plates from the top.


BASIC OPERATIONS

push(E element): Adds an element to the top of the stack.

pop(): Removes and returns the element at the top of the stack. If the stack is empty, 
this operation typically throws an exception.

peek(): Returns the element at the top of the stack without removing it. 
This is also known as top().

isEmpty(): Checks if the stack is empty and returns true if it is, otherwise returns false.

size(): Returns the number of elements in the stack.


APPLICATIONS OF STACKS

Expression Evaluation: Converting infix expressions to postfix or prefix and evaluating them.

Backtracking: Algorithms that involve exploring all possible options (e.g., solving a maze).

Undo Mechanisms: Most text editors and software applications use stacks to implement undo 
functionality.

Function Call Management: The call stack used in programming languages to manage function 
calls and returns is a stack.


COMPLEXITY ANALYSIS
Time Complexity: The operations push, pop, and peek typically have a time complexity of O(1) 
in most stack implementations.

Space Complexity: The space complexity is O(n), where n is the number of elements in the stack.