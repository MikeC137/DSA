ALGORITHMS OF EACH OPERATION IN ARRAY-BASED STACK

1. E push(E item)
    a. Check if the list is full. If full, double it's size
    b. Add the element at the top of the stack (end of the array)
    c. Increment the size of the stack
    Time Complexity: If full array O(n) --- If array not full O(1)  
    Amortized Time Complexity: O(1) over a series of add operations 
    if the array size grows geometrically (e.g., doubling).

2. E peek()
    a. Check if the list is empty. Throw an exception if it is.
    b. Access the top element of the stack directly
    c. Return the last element
    Time Complexity: O(1)
    Amortized Time Complexity: O(1)

3. E pop()
    a. Check if the list is empty. Throw an exception if it is.
    b. Access the top element of the stack directly
    c. Set the last element to null to remove the reference and allow 
    garbage collection
    d. Return the top element
    Time Complexity: O(1)
    Amortized Time Complexity: O(1)
   